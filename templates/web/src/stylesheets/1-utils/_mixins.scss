// ==========================================================================
// MIXINS
// ==========================================================================


//
// XTRAS
//
/*
https://www.sitepoint.com/structuring-css-class-selectors-with-sass/
https://css-tricks.com/snippets/sass/mixin-to-qualify-a-selector/

https://css-tricks.com/snippets/sass/custom-scrollbars-mixin/
*/


//
// BOOTSTRAP GRID MIXINS
// --------------------------------------------------------------------------

// Centered container element
@mixin container-fixed($gutter: $grid-gutter-width) {
  padding-right: ceil(($gutter / 2));
  padding-left: floor(($gutter / 2));
  margin-right: auto;
  margin-left: auto;
  @include clearfix;
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  margin-right: floor(($gutter / -2));
  margin-left: ceil(($gutter / -2));
  @include clearfix;
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage(($columns / $grid-columns));
  min-height: 1px;
  padding-right: ($gutter / 2);
  padding-left: ($gutter / 2);
}
@mixin make-xs-column-offset($columns) {
  margin-left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-push($columns) {
  left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-pull($columns) {
  right: percentage(($columns / $grid-columns));
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-right: ($gutter / 2);
  padding-left: ($gutter / 2);

  @media (min-width: $screen-sm-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-offset($columns) {
  @media (min-width: $screen-sm-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-push($columns) {
  @media (min-width: $screen-sm-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-pull($columns) {
  @media (min-width: $screen-sm-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-right: ($gutter / 2);
  padding-left: ($gutter / 2);

  @media (min-width: $screen-md-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-offset($columns) {
  @media (min-width: $screen-md-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-push($columns) {
  @media (min-width: $screen-md-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-pull($columns) {
  @media (min-width: $screen-md-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-right: ($gutter / 2);
  padding-left: ($gutter / 2);

  @media (min-width: $screen-lg-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-offset($columns) {
  @media (min-width: $screen-lg-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-push($columns) {
  @media (min-width: $screen-lg-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-pull($columns) {
  @media (min-width: $screen-lg-min) {
    right: percentage(($columns / $grid-columns));
  }
}

/*
// Creates a wrapper for a series of columns
@include make-row();

// Make the element grid-ready (applying everything but the width)
@include make-col-ready();
@include make-col($size, $columns: $grid-columns);

// Get fancy by offsetting, or changing the sort order
@include make-col-offset($size, $columns: $grid-columns);
*/


//
// EVENTS & CONTEXT
// --------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self (false) - Whether or not to include current selector
/// @see https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts

@mixin on-event($self: false) {
    @if $self {
        &,
        &:hover,
        &:focus,
        &:active {
            @content;
        }
    } @else {
        &:hover,
        &:focus,
        &:active {
            @content;
        }
    }
}

//
// USAGE
//
/*
.my-element {
    @include on-event($self: true) {
        color: blue;
    }
}
*/


@mixin when-inside($selector) {
    #{$selector} & {
        @content;
    }
}

//
// USAGE
//
/*
img {
    display: block;

    @include when-inside(".media-inline") {
        display: inline;
    }
}
*/


//
// BEM mixins
// https://www.sitepoint.com/structuring-css-class-selectors-with-sass/
// --------------------------------------------------------------------------

@mixin new($block) {
    @at-root .#{$block} {
        @content;
    }
}

@mixin has($element) {
    &__#{$element} {
        @content;
    }
}

@mixin when($modifier) {
    &--#{$modifier} {
        @content;
    }
}

//
// USAGE
//
/*
@include new("media") {
    // Styles for `.media` block

    @include has("image") {
        // Styles for `.media__image` element

        @include when("full") {
            // Styles for `.media__image--full` modified element
        }
    }

    @include when("new") {
        // Styles for `.media--new` midifier
    }
}
*/


//
// ICONS
//--------------------------------------------------------------------------

@mixin icons-ionicons($top, $right, $bottom, $left) {
    position: absolute;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
    display: inline-block;
    font-family: 'Ionicons';
    font-weight: normal;
    font-style: normal;
    font-size: 24px;
    line-height: 1;
    text-transform: none;
    letter-spacing: normal;
    word-wrap: normal;
    white-space: nowrap;
    direction: ltr;
    -webkit-font-smoothing: antialiased;
    text-rendering: optimizeLegibility;
    -moz-osx-font-smoothing: grayscale;
    transition: transform 0.3s ease-in-out;
}



//
// LINKS
// --------------------------------------------------------------------------

@mixin fancy-link($color, $hover) {
    position: relative;
    display: inline-block;
    font-weight: normal;
    text-decoration: none;
    color: $color;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    -webkit-perspective: 1000px;
    perspective: 1000px;
    cursor: pointer;
    // text-shadow: -4px -4px $main-color, -4px 4px $main-color, 4px -4px $main-color, 4px 4px $main-color;

    &:after {
        content: "";
        position: absolute;
        display: block;
        width: 100%;
        -webkit-transform: scaleX(0);
        -ms-transform: scaleX(0);
        transform: scaleX(0);
        height: 0.125rem;
        bottom: 0.125rem;
        left: 0.0625rem;
        background-color: $hover;
        text-decoration: none;
        -webkit-transform-origin: 100% 50%;
        -ms-transform-origin: 100% 50%;
        transform-origin: 100% 50%;
        transition: -webkit-transform .4s cubic-bezier(.23,1,.32,1);
        transition: transform .4s cubic-bezier(.23,1,.32,1);
        transition: transform .4s cubic-bezier(.23,1,.32,1), -webkit-transform .4s cubic-bezier(.23,1,.32,1);
        will-change: transform;
    }

    @include on-event {
        color: $hover;
        text-decoration: none;

        &:after {
            -webkit-transform: scaleX(1);
            -ms-transform: scaleX(1);
            transform: scaleX(1);
            -webkit-transform-origin: 0 50%;
            -ms-transform-origin: 0 50%;
            transform-origin: 0 50%;
        }
    }
}

@mixin classic-link($color, $hover, $border: true) {
    text-decoration: none;
    color: $color;
    box-shadow: 0 1px 0 transparent;
    transition: all 0.2s ease-in-out;

    @include on-event {
        color: $hover;
        text-decoration: none;

        @if $border {
            box-shadow: 0 1px 0 $hover;
        }
    }
}

@mixin border-link($color, $hover) {
    text-decoration: none;
    color: $color;
    box-shadow: 0 2px 0 transparent;
    transition: all 0.2s ease-in-out;

    @include on-event {
        color: $hover;
        text-decoration: none;
        box-shadow: 0 2px 0 $hover;
    }
}

@mixin box-link($color, $hover, $bg) {
    padding-bottom: 0.1rem;
    text-decoration: none;
    color: $color;
    transition: all 0.2s ease-in-out;

    @include on-event {
        color: $hover;
        text-decoration: none;
        text-shadow: -2px -2px $bg, -2px 2px $bg, 2px -2px $bg, 2px 2px $bg;
        box-shadow: inset 0 -0.175em $bg, inset 0 -0.2em $hover;
        // background-image: linear-gradient(to right, $hover 75%, transparent 75%);
    }
}

@mixin background-link($color, $colorhover, $bghover) {
    text-decoration: none;
    color: $color;
    background-color: transparent;
    outline: 1px solid transparent;
    transition: all 0.2s ease-out;

    @include on-event {
        text-decoration: none;
        color: $colorhover;
        background-color: $bghover;
        outline-color: $bghover;
    }
}

@mixin text-shadow-link {
    text-decoration: none;
    color: $black;
    transition: all 0.2s ease-in-out;

    @include on-event {
        color: $complementary-color;
        text-decoration: none;
        // text-shadow: 0 0 1px $complementary-color;
        text-shadow: 0 1px 0 black, 0 2px 1px black;
        // text-shadow: 1px 1px 1px $white, 1px 1px 1px $black;
    }
}

@mixin box-hidden-link {
    display: block;
    position: absolute;
    width: 100%;
    height: 100%;
    text-indent: -99999px;
    z-index: 3;
    // to allow text selection >
    // z-index: 0;
}


//
// Â¿? delete
//
@mixin link-hover {
    text-decoration: none;
    color: $complementary-color;
    // box-shadow: 0 2px 0 $black;
}



//
// BUTTONS
//--------------------------------------------------------------------------

@mixin reset-link-button {
    position: relative;
    margin: 0 0;
    padding: 0 0;
    letter-spacing: 0;
    white-space: nowrap;
    background: none;
    border: none;
    border-radius: 0;
    outline: none;
    transition: all 0.3s ease-in-out;
}

// @mixin reset-button {
//     position: relative;
//     padding: 1rem 1.4rem 0.8rem 1.4rem;
//     @include fontSet(18px, 18px);
//     letter-spacing: 0;
//     text-transform: uppercase;
//     white-space: nowrap;
//     background: none;
//     border: none;
//     border-radius: 0;
//     outline: none;
//     transition: all 0.3s ease-in-out;
// }


@mixin reset-button {
    margin: 0 0;
    padding: 0 0;
    line-height: 1;
    text-align: left;
    background: none;
    border: none;
    border-radius: 0;
    outline: none;
    transition: all 0.3s ease-in-out;

    @include on-event {
        outline: none;
    }
}

@mixin button-hover {
    text-decoration: none;
    color: $white;
    background-color: $complementary-color;
    border-color: $complementary-color;
}


@mixin arrow-button($color) {
    @include reset-button;
    position: relative;
    padding-right: 1.4rem;
    text-decoration: none;
    color: $color;
    // box-shadow: 0 2px 0 transparent;
    transition: all 0.2s ease-out;

    &:before,
    &:after {
        @include icons-ionicons(5px, 0, auto, auto);
        content: '\f3d1';
        font-size: 32px;
        width: 12px;
        height: 32px;
    }

    &:before {
        left: -10px;
        opacity: 0;
        visibility: hidden;
        transition: left 0.3s ease-out, opacity 0.2s ease-out;
        // transition: opacity 0.2s ease-out, left 0.2s ease-out;
    }

    &:after {
        right: 0;
        opacity: 1;
        visibility: visible;
        transition: right 0.3s ease-out, opacity 0.2s ease-out;
        // transition: opacity 0.2s ease-out, right 0.2s ease-out;
    }

    @include on-event {
        padding-right: 0.2rem;
        padding-left: 1.4rem;
        color: $color;
        text-decoration: none;

        &:focus {
            // outline: 1px solid $color;
            // outline-offset: 8px;
        }

        &:before {
            left: 0;
            opacity: 1;
            visibility: visible;
        }

        &:after {
            right: -10px;
            opacity: 0;
            visibility: hidden;
        }
    }
}

@mixin arrow-button-reverse($color) {
    position: relative;
    padding: 0.3rem 0 0.2rem 1.2rem;
    text-decoration: none;
    color: $color;
    transition: all 0.2s ease-out;

    &:before,
    &:after {
        @include icons-ionicons(-5px, 0, auto, auto);
        content: '\f3d2';
        font-size: 32px;
        font-weight: bold;
    }

    &:before {
        left: 0;
        opacity: 1;
        transition: opacity 0.2s ease-out;
    }

    &:after {
        right: 0;
        visibility: visible;
        opacity: 0;
        transform: translateX(10px);
        transition: opacity 0.2s ease-out, transform 0.2s ease-out;
    }

    @include on-event {
        padding-right: 1.4rem;
        padding-left: 0;
        color: $color;
        text-decoration: none;

        &:before {
            opacity: 0;
        }

        &:after {
            opacity: 1;
            transform: translateX(0);
        }
    }
}


//
// IMAGES
//--------------------------------------------------------------------------

@mixin reset-figure {
    position: relative;
    margin: 0 0;
    padding: 0 0;
    overflow: hidden;
}

@mixin stretch-to-left {
    @include reset-figure;
    margin-left: -22vw;

    img {
        width: 100%;
        max-width: 100%;
        height: auto;
    }
}

@mixin stretch-to-right {
    @include reset-figure;
    height: 100%;
    margin-right: -22vw;

    background-position: center center;
    background-repeat: no-repeat;
    background-size: cover;

    img {
        display: none;
        visibility: hidden;
    }
}

@mixin cover-img() {
    width: 100%;
    height: auto;
    position: relative;
    background-color: $white;
    background-position: center center;
    background-repeat: no-repeat;
    background-size: cover;
    overflow: hidden;

    // filter: contrast(70%);
    // filter: saturate(180%);
    transition: filter 0.5s cubic-bezier(.43,.41,.22,.91);

    &:before {
        content: "";
        display: block;
        padding-top: 56.25%; // 16:9 aspect ratio
    }

    @media(min-width: 40rem) {
        &:before {
            padding-top: 66.6%; // 3:2 aspect ratio
        }
    }
}

@mixin cover-vector() {
    width: 100%;
    height: auto;
    position: relative;
    background-color: $white;
    background-position: center center;
    background-repeat: no-repeat;
    background-size: cover;
    overflow: hidden;

    // filter: contrast(70%);
    // filter: saturate(180%);
    transition: filter 0.5s cubic-bezier(.43,.41,.22,.91);
}


//
// RESETS MISCELL ELEMENTS
//--------------------------------------------------------------------------

@mixin reset-full-scren {
    width: 100vw;
    margin-left: -50vw;
    left: 50%;
}

@mixin reset-list {
    margin: 0;
    padding: 0;
    list-style: none;

    > * {
        line-height: 1;
    }
}

@mixin reset-pseudo($color) {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    display: block;
    width: 100%;
    height: 100%;
    background-color: $color;
    // z-index: -1;
}

@mixin scrollbars($size, $border, $border-color, $foreground-color, $background-color: mix($foreground-color, white,  50%)) {
    // For Google Chrome
    &::-webkit-scrollbar {
        width:  $size;
        height: $size;
    }

    &::-webkit-scrollbar-thumb {
        background: $foreground-color;
        // padding hack
        border: $border solid $border-color;
    }

    &::-webkit-scrollbar-track {
        background: $background-color;
    }

    // For Internet Explorer
    & {
        scrollbar-face-color: $foreground-color;
        scrollbar-track-color: $background-color;
    }
}

// USE
// @include scrollbars(15px, $complementary-color, $white);

// WITH HACK
// @include scrollbars(24px, 8px, $white, $complementary-color, $white);



//
// RESETS MISCELL ELEMENTS
//--------------------------------------------------------------------------

@mixin quantity-query( $number, $comparison: 'equal' ) {
    $nth: '';

    @if index( ('greater' 'more' '>'), $comparison ) {
        $nth: 'n + #{$number}';
    } @else if index( ('less' 'fewer' '<'), $comparison ) {
        $nth: '-n + #{$number}';
    } @else if index( ('equal' 'same' '='), $comparison ) {
        $nth: $number;
    } @else {
        @warn "Sorry, that's an invalid $comparison value."
    }

    &:nth-last-child(#{$nth}):first-child {
        &,
        & ~ * {
            @content;
        }
    }
}

@mixin qq-equal($number) {
    @include quantity-query($number, equal) {
        @content;
    }
}

@mixin qq-greater($number) {
    @include quantity-query($number, greater) {
        @content;
    }
}

@mixin qq-less($number) {
    @include quantity-query($number, less) {
        @content;
    }
}

/*
.test {
    @include quantity-query(6, greater) {
        content: 'n + 6';
    }

    @include quantity-query(6, more) {
        content: 'n + 6';
    }

    @include quantity-query(6, '>') {
        content: 'n + 6';
    }

    @include qq-greater(6) {
        content: 'n + 6';
    }

    @include quantity-query(6, less) {
        content: '-n + 6';
    }

    @include quantity-query(6, fewer) {
        content: '-n + 6';
    }

    @include quantity-query(6, '<') {
        content: '-n + 6';
    }

    @include qq-less(6) {
        content: '-n + 6';
    }

    @include quantity-query(6) {
        content: '6';
    }

    @include quantity-query(6, equal) {
        content: '6';
    }

    @include quantity-query(6, same) {
        content: '6';
    }

    @include quantity-query(6, '=') {
        content: '6';
    }

    @include qq-equal(6) {
        content: '6';
    }

}
*/
