//
// TYPOGRAPHY
// --------------------------------------------------------------------------



/*
Redefine the rem value while keeping it proportional.
Useful values, with default font-size of 16px:
>>> 62.5% -> 1rem = 10px, 0.1rem  = 1px
>>> 125%  -> 1rem = 20px, 0.05rem = 1px
*/


//
// https://24ways.org/2019/a-modern-typographic-scale/
//

// :root {
//     --scale-2: 7.1px;  /* 10.7 ÷ 1.5 */
//     --scale-1: 10.7px; /* 16 ÷ 1.5   */
//     --scale0: 16px;    /* body text  */
//     --scale1: 24px;    /* 16 × 1.5   */
//     --scale2: 36px;    /* 24 × 1.5   */
// }

// use
// p { font-size: var(--scale0); }
//

// :root {
//     --scale-2: 0.4rem;  /* 0.7rem ÷ 1.5 */
//     --scale-1: 0.7rem;  /* 1rem ÷ 1.5   */
//     --scale0: 1rem;     /* body text    */
//     --scale1: 1.5rem;   /* 1rem × 1.5   */
//     --scale2: 2.25rem;  /* 1.5rem × 1.5 */
// }

//
// html { font-size: 100%; }     /* 1rem = 16px */
//
// @media screen and (min-width: 25em) {
//     html { font-size: 112.5%; } /* 1rem = 18px */
// }
//


// :root {
//     --int: 1.5;
//     --scale0: 1rem;
//     --scale-1: calc(var(--scale0) / var(--int));
//     --scale-2: calc(var(--scale-1) / var(--int));
//     --scale1: calc(var(--scale0) * var(--int));
//     --scale2: calc(var(--scale1) * var(--int));
// }

/*
//
// Final typographic scale
//
:root {
    $interval: 1.5;    // Unitless for proportional, unit for fixed
    $body-text: 1rem;  // Must have a unit
    $scale-min: -2;    // Unitless negative integer
    $scale-max: 2;     // Unitless positive integer

    --int: #{$interval};
    --scale0: #{$body-text};

    @if $scale-min < 0 {
        // Generate scale variables smaller than the base text size
        @for $i from -1 through $scale-min {
            @if type-of($interval) == number {
                @if unitless($interval) {
                    --scale#{$i}: calc(var(--scale#{$i + 1}) / var(--int));
                } @else {
                    --scale#{$i}: calc(var(--scale#{$i + 1}) - var(--int));
                }
            }
        }
    }
    @if $scale-max > 0 {
        // Generate scale variables larger than the base text size
        @for $i from 1 through $scale-max {
            @if type-of($interval) == number {
                @if unitless($interval) {
                    --scale#{$i}: calc(var(--scale#{$i - 1}) * var(--int));
                } @else {
                    --scale#{$i}: calc(var(--scale#{$i - 1}) + var(--int));
                }
            }
        }
    }
}
*/

//
// Another take
// https://codepen.io/gunnarbittersmann/details/rNamLbj
//
/*
:root {
    --int: 1.2;
    --scale0: 1rem;
    --scale-1: calc(var(--scale0) / var(--int));
    --scale-2: calc(var(--scale-1) / var(--int));
    --scale1: calc(var(--scale0) * var(--int));
    --scale2: calc(var(--scale1) * var(--int));
}

@media (min-width: 22em) {
    :root { --int: 1.3 }
}
@media (min-width: 32em) {
    :root { --int: 1.4 }
}
@media (min-width: 42em) {
    :root { --int: 1.5 }
}
*/


// use
/*
body {
    font: var(--scale0)/1.4 Calibri, sans-serif;
    max-width: 40em;
}

h1 {
    font-size: var(--scale2);
    line-height: 1.2;
}

h2 {
    font-size: var(--scale1);
    line-height: 1.2;
}
*/


//
// FLUID TYPE
// --------------------------------------------------------------------------

/*
body {
  color: $text-color;
  font: normal 125% / 1.4;
}
body {
  font-size: calc(14px + (26 - 14) * ((100vw - 300px) / (1600 - 300)));
  line-height: calc(1.3em + (1.5 - 1.2) * ((100vw - 300px)/(1600 - 300)));
}



//
// TYPOGRAPHY
// https://www.madebymike.com.au/writing/fluid-type-calc-examples/
// --------------------------------------------------------------------------

/*
//
// Pixel
//

.fluid-type {
  font-size: 14px;
}

@media screen and (min-width: 320px) {
  .fluid-type {
    font-size: calc(14px + 8 * ((100vw - 320px) / 960));
  }
}

@media screen and (min-width: 1280px) {
  .fluid-type {
    font-size: 22px;
  }
}


//
// Rem
//

.fluid-type {
  font-size: 0.875rem;
}

@media screen and (min-width: 20rem) {
  .fluid-type {
    font-size: calc(0.875rem + 0.5 * ((100vw - 20rem) / 60));
  }
}

@media screen and (min-width: 80rem) {
  .fluid-type {
    font-size: 1.375rem;
  }
}


//
// Fluid line-height
//

.molten-leading {
  line-height: 1.2em;
}

@media screen and (min-width: 20em) {
  .molten-leading {
    line-height: calc(1.2em + 0.6 * ((100vw - 20em) / 60));
  }
}

@media screen and (min-width: 80em) {
  .molten-leading {
    line-height: 1.8em;
  }
}


//
// Fluid box
//

.fluid-box {
  width: 200px;
}

@media screen and (min-width: 320px) {
  .fluid-box {
    width: calc(200px + 300 * ((100vw - 320px) / 960));
  }
}

@media screen and (min-width: 1280px) {
  .fluid-box {
    width: 500px;
  }
}
*/




/*
* Redefine the rem value while keeping it proportional.
* Useful values, with default font-size of 16px:
* • 62.5% -> 1rem = 10px, 0.1rem  = 1px
* • 125%  -> 1rem = 20px, 0.05rem = 1px
*/

html {
  font-size: 62.5%;
}

body {
  box-sizing: border-box;
  color: $black;
  font-family: $body-font;
  font-size: 1.8rem;
  font-weight: 400;
  // overflow-x: hidden;
  // letter-spacing: -.015em;
  // Support for all WebKit browsers.
  -webkit-font-smoothing: antialiased;
  // Support for Safari and Chrome.
  text-rendering: optimizeLegibility;
  // Support for Firefox.
  -moz-osx-font-smoothing: grayscale;
  // Support for IE.
  font-feature-settings: 'liga';
}

/*
* With default user settings:// * • 0.625rem = 10px
* • 1.25rem  = 20px
* • 2.5rem   = 40px

h1 {
  font-size: 1.25rem;
}

@media (min-width:320px) {
  h1 {
    font-size: calc(3.125vw + 0.625rem);
  }
}

@media (min-width:960px) {
  h1 {
    font-size: 2.5rem;
  }
}
*/


h1,
h2,
h3,
h4,
h5,
h6,
.h1,
.h2,
.h3,
.h4,
.h5,
.h6,
.title {
  font-family: $header-font;
  font-weight: 600;
  letter-spacing: -.0415625em;
  line-height: 1.25;
  margin: 0 0;
  // margin: 3.5rem 0 2rem
}

.section-header {
  font-size: 4.2rem;
  font-weight: 700;
  line-height: 1.138888889;
  letter-spacing: 0;
  color: $main-color;
}

h1, .h1 {
  font-size: 3.6rem;
  line-height: 1.4;
}

h2, .h2 {
  font-size: 2.4rem;
  // letter-spacing: 0;
}

h3, .h3 {
  font-size: 1.8rem;
}

h4, .h4 {
  font-size: 2.4rem
}

h5, .h5 {
  font-size: 2.1rem
}

h6, .h6 {
  font-size: 1.6rem;
  letter-spacing: 0.03125em;
  text-transform: uppercase
}

p {
  line-height: 1.45;
  margin: 0 0 1.4em;

  strong {
    font-weight: 600
  }

}

.emphasis {
  @include highlight-text;
}




// ==========================================================================
// Fluid Typography
// https://css-tricks.com/snippets/css/fluid-typography/
// ==========================================================================

// -----------------------------------------------------------------------------
// Fluid vertical rhythm
// https://codepen.io/MadeByMike/pen/bEEGvv
// -----------------------------------------------------------------------------

$baseline: 1.5rem;

$minScreen: 20rem;
$maxScreen: 50rem;
$minFont: .8rem;
$maxFont: 2rem;

$h1: 2rem;
$h2: 1.5rem;
$h3: 1.25rem;
$h4: 1rem;
$h5: .875rem;


@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  & {
    @each $property in $properties {
      #{$property}: $min-value;
    }

    @media screen and (min-width: $min-vw) {
      @each $property in $properties {
        #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
    }

    @media screen and (min-width: $max-vw) {
      @each $property in $properties {
        #{$property}: $max-value;
      }
    }
  }
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

*{
  box-sizing: border-box;
}

html {
  box-sizing: border-box;
  height: 100%;
  font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  @include fluid-type(font-size, $minScreen, $maxScreen, $minFont, $maxFont);
}

body {
  line-height: $baseline;
  padding: $baseline 0;
  margin: 0 auto;
  background-image: linear-gradient(rgba(200, 50, 50, .25) 1px, transparent 1px);
  background-size: 1px $baseline;
  width: 22rem;
}

p{
  line-height: $baseline;
  margin-bottom: $baseline;
}

h1,
h2,
h3,
h4,
h5{
  font-weight: 700;
  margin-bottom: $baseline;
}

h1 {
  font-size: $h1;
  line-height: $h1;
  margin-top: calc((#{$baseline} - #{$h1}) + #{$baseline});
}

h2 {
  font-size: $h2;
  line-height: $h2;
  margin-top: calc((#{$baseline} - #{$h2}) + #{$baseline}*2);
}

h3 {
  font-size: $h3;
  line-height: $h3;
  margin-top: calc((#{$baseline} - #{$h3}) + #{$baseline}*2);
}

h4 {
  font-size: $h4;
  line-height: $h4;
  margin-top: calc((#{$baseline} - #{$h4}) + #{$baseline}*2);
}

h5 {
  font-size: $h5;
  line-height: $h5;
  margin-top: calc((#{$baseline} - #{$h5}) + #{$baseline}*2);
}




// -----------------------------------------------------------------------------
// Fluid Type
// https://codepen.io/chriscoyier/pen/pPRGLP
// -----------------------------------------------------------------------------

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {

      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }

      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

$min_width: 320px;
$max_width: 1000px;
$min_font: 16px;
$max_font: 22px;

html {
  @include fluid-type($min_width, $max_width, $min_font, $max_font);
}

body {
  max-width: 1000px;
  padding: 1rem;
  margin: 0 auto;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}



//
// Fluid type in Sass
// https://codepen.io/MadeByMike/pen/vNrvdZ
// --------------------------------------------------------------------------

// I'm now recommending this technique:

@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {
  & {
    @each $property in $properties {
      #{$property}: $min-value;
    }

    @media screen and (min-width: $min-screen) {
      @each $property in $properties {
        #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);
      }
    }

    @media screen and (min-width: $max-screen) {
      @each $property in $properties {
        #{$property}: $max-value;
      }
    }
  }
}

// Requires the calc-interpolation function which can also be used independently

@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {
  $a: ($max-value - $min-value) / ($max-screen - $min-screen);
  $b: $min-value - $a * $min-screen;

  $sign: "+";
  @if ($b < 0) {
    $sign: "-";
    $b: abs($b);
  }
  @return calc(#{$a*100}vw #{$sign} #{$b});
}

// Indrek Pass also has a fantastic mixin here: http://sassmeister.com/gist/7f22e44ace49b5124eec


/* Single property */
html {
  @include interpolate(font-size, 320px, 1366px, 14px, 20px);
}

/* Multiple properties with same values */
h1,h2,h3,h4,h5 {
  @include interpolate((padding-top, padding-bottom), 20rem, 70rem, 0rem, .5rem);
}




//
// Fluid type in Sass
// https://www.sassmeister.com/gist/7f22e44ace49b5124eec
// --------------------------------------------------------------------------


@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  @each $property in $properties {
    #{$property}: $min-value;
  }

  @media (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
    }
  }

  @media (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}

@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

/* Single property */
html {
  @include fluid-type(font-size, 320px, 1366px, 14px, 18px);
}

/* Multiple properties with same values */
h1 {
  @include fluid-type(padding-bottom padding-top, 20em, 70em, 2em, 4em);
}
